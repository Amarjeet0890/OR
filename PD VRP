from functools import partial

from ortools.constraint_solver import pywrapcp
from ortools.constraint_solver import routing_enums_pb2


###########################
# Problem Data Definition #
###########################
def create_data_model():
    """Stores the data for the problem"""
    data = {}
    _capacity = 10
    # OD matrix
    data["distancet_matrix"]= pd.read_csv("/content/New_PD /New_ODMatrix.csv", header=None).values.tolist()
    print("Travel Time matrix=",data["distancet_matrix"])
    data['num_locations'] = len(data["distancet_matrix"])
    data["demands"]= [int(col) for row in (pd.read_csv("/content/New_PD /New_demand.csv", header=None).values.tolist()) for col in row if not col!=col]
    print("Demands=",data["demands"])
    data['pickups_deliveries'] = pd.read_csv('/content/New_PD /New_PD_Pairs.csv', header=None).values.tolist()
    print("PD pairs=",data['pickups_deliveries'])
    data['num_vehicles'] = 6
    #data['time_windows'] = pd.read_csv('/content/New_PD /Time_windowNew.csv', header=None).apply(lambda x: eval(x[0]), axis=1).tolist()
    data['time_windows'] = [(0, 0), (0, 15), (12, 15), (12, 18), (15, 18), (15, 18), (0, 45), (0, 45), (0, 45), (0, 45), (0, 45), (15, 21), (0, 45), (18, 21), (0, 45), (21, 24), (0, 45)]
    print("Time Windows=",data['time_windows'])
    data['vehicle_max_distance'] = 250
    data['vehicle_capacity'] = _capacity
    data['vehicle_max_time'] = 20  # We USE the maximum time a vehicle can operate before cyclone, which is the lead time (Vehicle_max_time)
    data['vehicle_load_unload_time'] = 5 #10mins to load and unload the evacuees
    data['depot'] = 0
    return data

#######################
# Problem Constraints #
#######################
def create_distance_evaluator(data):
    def distance_evaluator(manager, from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data["distancet_matrix"][from_node][to_node]
    return distance_evaluator


def add_distance_dimension(routing, manager, data, distance_evaluator_index):
    """Add Global Span constraint"""
    distance = 'Distance'
    routing.AddDimension(
        distance_evaluator_index,
        0,  # null slack
        data['vehicle_max_distance'],  # maximum distance per vehicle
        True,  # start cumul to zero
        distance)
    distance_dimension = routing.GetDimensionOrDie(distance)
    # Try to minimize the max distance among vehicles.
    # /!\ It doesn't mean the standard deviation is minimized
    distance_dimension.SetGlobalSpanCostCoefficient(100)

    # Define Transportation Requests. #######################################
    for request in data['pickups_deliveries']:
        pickup_index = manager.NodeToIndex(request[0])
        delivery_index = manager.NodeToIndex(request[1])
        routing.AddPickupAndDelivery(pickup_index, delivery_index)
        routing.solver().Add(
            routing.VehicleVar(pickup_index) == routing.VehicleVar(
                delivery_index))
        routing.solver().Add(
            distance_dimension.CumulVar(pickup_index) <=
            distance_dimension.CumulVar(delivery_index))
    ##########################################################################

def create_demand_evaluator(data):
    """Creates callback to get demands at each location."""
    _demands = data['demands']

    def demand_evaluator(manager, from_node):
        """Returns the demand of the current node"""
        return _demands[manager.IndexToNode(from_node)]

    return demand_evaluator


def add_capacity_constraints(routing, manager, data, demand_evaluator_index):
    """Adds capacity constraint"""
    vehicle_capacity = data['vehicle_capacity']
    capacity = 'Capacity'
    routing.AddDimension(
        demand_evaluator_index,
        vehicle_capacity,
        vehicle_capacity,
        True,  # start cumul to zero
        capacity)

    # Add Slack for reseting to zero unload depot nodes.
    # e.g. vehicle with load 10/15 arrives at node 1 (depot unload)
    # so we have CumulVar = 10(current load) + -15(unload) + 5(slack) = 0.
    capacity_dimension = routing.GetDimensionOrDie(capacity)
    # Allow to drop reloading nodes with zero cost.
    # for node in [1, 2, 3, 4, 5]:
    #     node_index = manager.NodeToIndex(node)
    #     routing.AddDisjunction([node_index], 0)

    # Allow to drop regular node with a cost. (Pickup & Delivery node)
    #for node in range(1, len(data['demands'])):
        #node_index = manager.NodeToIndex(node)
        #capacity_dimension.SlackVar(node_index).SetValue(0)
        #routing.AddDisjunction([node_index], 100_000)

#def time_callback(manager,from_index, to_index):
        #"""Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
    #from_node = manager.IndexToNode(from_index)
    #to_node = manager.IndexToNode(to_index)
    #return data["ttime_matrix"][from_node][to_node]  +  data['vehicle_load_unload_time']

def create_time_evaluator(data):
    def time_evaluator(manager, from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data["distancet_matrix"][from_node][to_node] +  data['vehicle_load_unload_time']
    return time_evaluator

def add_time_window_constraints(routing, manager, data, time_evaluator_index):
    """Add Time windows constraint"""
    time = 'Time'
    max_time = data['vehicle_max_time']
    routing.AddDimension(
        time_evaluator_index,
        max_time,  # allow waiting time
        max_time,  # maximum time per vehicle
        False,  # don't force start cumul to zero since we are giving TW to start nodes
        time)
    time_dimension = routing.GetDimensionOrDie(time)
    # Add time window constraints for each location except depot
    # and 'copy' the slack var in the solution object (aka Assignment) to print it
    location_idx = len(data["distancet_matrix"])
    for location_idx, time_window in enumerate(data['time_windows']):
        if location_idx == 0:
            continue
        index = manager.NodeToIndex(location_idx)
        #time_dimension.CumulVar(index).SetRange(data['time_windows'][0], data['time_windows'][1])
        #time_dimension.CumulVar(index).SetRange(time_window[0][0], time_window[0][1])
        time_dimension.CumulVar(index).SetRange(time_window[0], time_window[1])
        routing.AddToAssignment(time_dimension.SlackVar(index))
    # Add time window constraints for each vehicle start node
    # and 'copy' the slack var in the solution object (aka Assignment) to print it
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        time_dimension.CumulVar(index).SetRange(data['time_windows'][0][0],
                                                data['time_windows'][0][1])
        routing.AddToAssignment(time_dimension.SlackVar(index))
        # Warning: Slack var is not defined for vehicle's end node
        #routing.AddToAssignment(time_dimension.SlackVar(self.routing.End(vehicle_id)))


###########
# Printer #
###########
def print_solution(data, manager, routing, assignment):  # pylint:disable=too-many-locals
    """Prints assignment on console"""
    print(f'Objective: {assignment.ObjectiveValue()}')
    total_distance = 0
    total_load = 0
    total_time = 0
    capacity_dimension = routing.GetDimensionOrDie('Capacity')
    time_dimension = routing.GetDimensionOrDie('Time')
    #dropped = []
    #for order in range(6, routing.nodes()):
        #index = manager.NodeToIndex(order)
        #if assignment.Value(routing.NextVar(index)) == index:
            #dropped.append(order)
    #print(f'dropped orders: {dropped}')
    #for reload in range(1, 6):
        #index = manager.NodeToIndex(reload)
        #if assignment.Value(routing.NextVar(index)) == index:
            #dropped.append(reload)
    #print(f'dropped reload stations: {dropped}')

    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = f'Route for vehicle {vehicle_id}:\n'
        distance = 0
        while not routing.IsEnd(index):
            load_var = capacity_dimension.CumulVar(index)
            time_var = time_dimension.CumulVar(index)
            plan_output += ' {0} Load({1}) Time({2},{3}) ->'.format(
                manager.IndexToNode(index),
                assignment.Value(load_var),
                assignment.Min(time_var), assignment.Max(time_var))
            previous_index = index
            index = assignment.Value(routing.NextVar(index))
            distance += routing.GetArcCostForVehicle(previous_index, index,
                                                     vehicle_id)
        load_var = capacity_dimension.CumulVar(index)
        time_var = time_dimension.CumulVar(index)
        plan_output += ' {0} Load({1}) Time({2},{3})\n'.format(
            manager.IndexToNode(index),
            assignment.Value(load_var),
            assignment.Min(time_var), assignment.Max(time_var))
        plan_output += f'Distance of the route: {distance}m\n'
        plan_output += f'Load of the route: {assignment.Value(load_var)}\n'
        plan_output += f'Time of the route: {assignment.Value(time_var)}min\n'
        print(plan_output)
        total_distance += distance
        total_load += assignment.Value(load_var)
        total_time += assignment.Value(time_var)
    print('Total Distance of all routes: {}m'.format(total_distance))
    print('Total Load of all routes: {}'.format(total_load))
    print('Total Time of all routes: {}min'.format(total_time))


########
# Main #
########
def main():
    """Entry point of the program"""
    # Instantiate the data problem.
    data = create_data_model()

    # Create the routing index manager
    manager = pywrapcp.RoutingIndexManager(data['num_locations'],
                                           data['num_vehicles'], data['depot'])

    # Create Routing Model
    routing = pywrapcp.RoutingModel(manager)

    # Define weight of each edge
    distance_evaluator_index = routing.RegisterTransitCallback(
        partial(create_distance_evaluator(data), manager))
    routing.SetArcCostEvaluatorOfAllVehicles(distance_evaluator_index)

    # Add Distance constraint to minimize the longuest route
    add_distance_dimension(routing, manager, data, distance_evaluator_index)

    # Add Capacity constraint
    demand_evaluator_index = routing.RegisterUnaryTransitCallback(
        partial(create_demand_evaluator(data), manager))
    add_capacity_constraints(routing, manager, data, demand_evaluator_index)

    # Add Time Window constraint
    time_evaluator_index = routing.RegisterTransitCallback(partial(create_time_evaluator(data), manager))
    add_time_window_constraints(routing, manager, data, time_evaluator_index)

    # Setting first solution heuristic (cheapest addition).
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)  # pylint: disable=no-member
    search_parameters.local_search_metaheuristic = (
        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)
    search_parameters.time_limit.FromSeconds(120)

    # Solve the problem.
    solution = routing.SolveWithParameters(search_parameters)
    if solution:
        print_solution(data, manager, routing, solution)
    else:
        print("No solution found !")

if __name__ == '__main__':
    main()
